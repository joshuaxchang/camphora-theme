<div id="cart-drawer" class="fixed top-0 right-0 h-full w-full max-w-md bg-white shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-40 flex flex-col">
  <div class="flex-shrink-0 flex justify-between items-center border-b p-4">
    <h2 class="text-2xl font-bold">Your Cart</h2>
    <button id="close-cart-drawer" class="text-brand-accent hover:text-brand-text text-4xl font-semibold p-2 leading-none">&times;</button>
  </div>

  <div id="cart-drawer-body" class="relative flex-grow overflow-y-auto">
    <div id="cart-loading-overlay" class="absolute inset-0 bg-white bg-opacity-60 backdrop-blur-[1.5px] z-10 hidden items-center justify-center">
      <svg class="animate-spin h-8 w-8 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
    </div>
    
    <div id="cart-drawer-content">
        {% render 'cart-drawer-content' %}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cartDrawerBody = document.getElementById('cart-drawer-body');
    const handleCartChange = (event) => {
      const target = event.target.closest('.quantity-minus, .quantity-plus, .cart-remove-button');
      if (!target) return;
      event.preventDefault();
      const lineItem = target.closest('[data-line-item-key]');
      if (!lineItem) return;
      const key = lineItem.dataset.lineItemKey;
      let newQuantity;
      if (target.classList.contains('cart-remove-button')) {
        newQuantity = 0;
      } else {
        const quantityInput = lineItem.querySelector('input[type="number"]');
        const currentQuantity = parseInt(quantityInput.value, 10);
        newQuantity = target.classList.contains('quantity-plus') ? currentQuantity + 1 : currentQuantity - 1;
      }
      updateCart(key, newQuantity);
    };
    cartDrawerBody.addEventListener('click', handleCartChange);

    const updateCart = (key, quantity) => {
      document.getElementById('cart-loading-overlay').style.display = 'flex';
      fetch('/cart/change.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: key, quantity: quantity })
      })
      .then(response => response.json())
      .then(cart => {
        updateCartDrawerContent();
        updateHeaderCartCount(cart.item_count);
      })
      .catch(e => console.error(e))
      .finally(() => {
        document.getElementById('cart-loading-overlay').style.display = 'none';
      });
    };

    const updateCartDrawerContent = () => {
      // CORRECTED: Fetch the new section we created
      fetch('?section_id=cart-drawer-section')
        .then(response => response.text())
        .then(html => {
          const newContent = new DOMParser().parseFromString(html, 'text/html');
          document.getElementById('cart-drawer-content').innerHTML = newContent.querySelector('#cart-drawer-content').innerHTML;
        });
    };

    const updateHeaderCartCount = (count) => {
        const cartCountSpan = document.getElementById('cart-item-count');
        if (cartCountSpan) {
            cartCountSpan.textContent = count;
            cartCountSpan.classList.toggle('hidden', count === 0);
        }
    };
  });
</script>