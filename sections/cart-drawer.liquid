<div id="cart-drawer" class="fixed top-0 right-0 h-full w-full max-w-md bg-white shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-30 flex flex-col">  <div class="flex-shrink-0 flex justify-between items-center border-b p-4">
    <h2 class="text-2xl font-bold text-brand-text">Your Cart</h2>
    <button id="close-cart-drawer" class="text-brand-accent hover:text-brand-text text-4xl font-semibold p-2 leading-none">&times;</button>
  </div>

  <div id="cart-items" class="flex-grow p-4 overflow-y-auto">
    {%- if cart.item_count > 0 -%}
      <ul>
        {%- for item in cart.items -%}
          <li class="flex items-center justify-between gap-4 mb-5 last:mb-0" data-line-item-key="{{ item.key }}">
            
            <div class="flex-grow flex items-center gap-4">
              <div class="item-image flex-shrink-0">
                <a href="{{ item.url }}">
                  <img src="{{ item.image | image_url: width: 160, height: 160, crop: 'center' }}" alt="{{ item.title | escape }}" class="w-16 h-16 object-cover rounded">
                </a>
              </div>
              <div class="item-info flex flex-col justify-center">
                <a href="{{ item.url }}" class="item-title font-semibold text-brand-text hover:text-brand-primary-hover hover:underline transition-colors block">{{ item.product.title }}</a>
                
                {%- unless item.variant.title contains 'Default' -%}
                  <p class="item-variant text-sm text-gray-500 cart-item-meta {% if item.variant.title != blank %}is-visible{% endif %}">
                    {{ item.variant.title }}
                  </p>
                {%- endunless -%}
                
                <p class="item-unit-price text-sm text-gray-400 cart-item-meta {% if item.quantity > 1 %}is-visible{% endif %}">
                  {{ item.variant.price | money_without_trailing_zeros }}
                </p>
              </div>
            </div>
            
            <div class="flex-shrink-0 flex items-center gap-4">
              <div class="item-actions">
                <div class="item-quantity-selector flex items-center border rounded-lg p-1">
                    <button 
                      type="button" 
                      class="quantity-minus w-6 h-6 flex items-center justify-center text-gray-500 transition-colors 
                            {% if item.quantity > 1 %}
                              hover:text-brand-accent
                            {% else %}
                              hover:text-red-500
                            {% endif %}"
                    >
                    {% if item.quantity > 1 %}
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg>
                    {% else %}
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    {% endif %}
                  </button>
                  <input type="number" value="{{ item.quantity }}" min="1" class="w-8 text-center bg-transparent border-none focus:ring-0 font-bold text-brand-text p-0" aria-label="Quantity" data-last-valid-quantity="{{ item.quantity }}">
                  <button type="button" class="quantity-plus w-6 h-6 flex items-center justify-center text-gray-500 hover:text-brand-accent transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" /></svg>
                  </button>
                </div>
              </div>

              <div class="total w-16 text-right">
                <div class="item-line-total h-7 flex items-center justify-end text-brand-text">
                  <p class="font-bold">{{ item.line_price | money_without_trailing_zeros }}</p>
                </div>
              </div>
            </div>
          </li>
        {%- endfor -%}
      </ul>
    {%- else -%}
      <p class="text-gray-500 text-center mt-10">Your cart is empty.</p>
    {%- endif -%}
  </div>

  <div class="flex-shrink-0 border-t p-4">
    <div id="cart-footer" {% if cart.item_count == 0 %}class="hidden"{% endif %}>
      <div class="flex justify-between items-center mb-4">
        <p class="text-xl font-semibold text-brand-text">Subtotal</p>
        <p id="cart-subtotal" class="text-xl font-semibold text-brand-primary transition-all duration-200 ease-in-out">{{ cart.total_price | money_without_trailing_zeros }}</p>      </div>
      <p class="text-xs font-light text-gray-500 mb-4">
        Taxes & <a href="/policy#shipping" class="font-medium text-brand-text/80 underline hover:text-brand-primary-hover transition-colors">Shipping</a> calculated at checkout
      </p>
      <a href="/checkout" id="checkout-button" class="w-full text-center bg-brand-primary text-white font-bold py-3 px-6 rounded-lg transition-all duration-300 block h-12 flex items-center justify-center shadow-lg shadow-neutral-900/20 hover:shadow-xl hover:shadow-neutral-900/30 transform hover:-translate-y-1">
        <span>Checkout</span>
      </a>
    </div>
  </div>

</div>

<style>
  .body-no-scroll {
    overflow: hidden;
  }
  .cart-item-meta {
    overflow: hidden;
    transition: max-height 0.25s ease-out, opacity 0.2s ease-in-out;
    max-height: 0;
    opacity: 0;
  }
  .cart-item-meta.is-visible {
    max-height: 2rem; /* Roughly the height of one line of text */
    opacity: 1;
  }

  #cart-subtotal.is-updating {
    filter: blur(2px);
    opacity: 0.6;
    transition: all 0.2s ease-in-out;
  }

  li.is-removing {
    transition: max-height 0.3s ease, opacity 0.3s ease, margin-bottom 0.3s ease;
    overflow: hidden;
    max-height: 0 !important;
    opacity: 0 !important;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    border-width: 0 !important;
    margin-bottom: 0 !important;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // --- Cart Drawer Elements ---
    const cartDrawer = document.getElementById('cart-drawer');
    const openCartButtons = document.querySelectorAll('#open-cart-button');
    const backdrop = document.getElementById('cart-drawer-backdrop');
    let debounceTimer;

    // --- SVG Icon Templates ---
    const minusIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg>`;
    const trashIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>`;
    const spinnerSVG = `<svg class="animate-spin h-5 w-5 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>`;

    // --- Helper Functions ---
    const formatMoney = (cents) => {
      if (isNaN(cents) || cents == null) { return '$0'; }
      const dollars = Math.floor(cents / 100);
      return `$${dollars.toLocaleString('en-US')}`;
    };

    const toggleAllQuantityControls = (disabled) => {
      cartDrawer.querySelectorAll('.item-quantity-selector button, .item-quantity-selector input').forEach(el => {
        el.disabled = disabled;
      });
    };
    
    const showItemRemovalState = (lineItem) => {
        if (!lineItem) return;
        lineItem.style.position = 'relative';
        const overlay = document.createElement('div');
        overlay.className = 'absolute inset-0 bg-white/50 backdrop-blur-[1.5px] z-10 flex items-center justify-center rounded-lg';
        overlay.innerHTML = spinnerSVG;
        lineItem.appendChild(overlay);
    };

    // --- Core UI Update Functions ---
    const updateUIFromCartData = (cart) => {
      const subtotalEl = document.getElementById('cart-subtotal');
      if (subtotalEl) { 
        subtotalEl.textContent = formatMoney(cart.total_price); 
        subtotalEl.classList.remove('is-updating');
      }
      
      const cartCountSpan = document.getElementById('cart-item-count');
      if (cartCountSpan) {
        cartCountSpan.textContent = cart.item_count;
        cartCountSpan.classList.toggle('hidden', cart.item_count === 0);
      }
      
      document.getElementById('cart-footer')?.classList.toggle('hidden', cart.item_count === 0);
      const cartItemsEl = document.getElementById('cart-items');
      const updatedItemKeys = new Set(cart.items.map(item => item.key));

      cartItemsEl.querySelectorAll('li[data-line-item-key]').forEach(li => {
        const key = li.dataset.lineItemKey;
        if (updatedItemKeys.has(key)) {
          const item = cart.items.find(i => i.key === key);
          const inputEl = li.querySelector('input[type="number"]');
          if (inputEl) {
            inputEl.value = item.quantity;
            inputEl.dataset.lastValidQuantity = item.quantity;
          }

          const lineTotalContainerEl = li.querySelector('.item-line-total');
          if (lineTotalContainerEl) {
            lineTotalContainerEl.innerHTML = `<p class="font-bold">${formatMoney(item.final_line_price)}</p>`;
          }
          
          const unitPriceEl = li.querySelector('.item-unit-price');
          if (unitPriceEl) {
            unitPriceEl.innerHTML = formatMoney(item.final_price);
            unitPriceEl.classList.toggle('is-visible', item.quantity > 1);
          }
          const minusButton = li.querySelector('.quantity-minus');
          if (minusButton) {
            minusButton.innerHTML = item.quantity > 1 ? minusIconSVG : trashIconSVG;
            
            if (item.quantity > 1) {
              minusButton.classList.remove('hover:text-red-500');
              minusButton.classList.add('hover:text-brand-accent');
            } else {
              minusButton.classList.remove('hover:text-brand-accent');
              minusButton.classList.add('hover:text-red-500');
            }
          }
        } else {
          li.classList.add('is-removing');
          li.addEventListener('transitionend', () => {
            li.remove();
            if (cart.item_count === 0 && cartItemsEl.querySelector('li') === null) {
                cartItemsEl.innerHTML = '<p class="text-gray-500 text-center mt-10">Your cart is empty.</p>';
            }
          }, { once: true });
        }
      });
      
      if (cart.item_count === 0 && cartItemsEl.querySelector('li') === null) {
        cartItemsEl.innerHTML = '<p class="text-gray-500 text-center mt-10">Your cart is empty.</p>';
      }
      
      toggleAllQuantityControls(false);
    };

    const refreshCartDrawer = () => {
      fetch('/cart?section_id=cart-drawer')
        .then(response => response.text())
        .then(text => {
          const html = new DOMParser().parseFromString(text, 'text/html');
          const newDrawerContent = html.querySelector('#cart-drawer');
          if (newDrawerContent) {
            cartDrawer.innerHTML = newDrawerContent.innerHTML;
          }
        });
    };

    const updateQuantity = (key, quantity) => {
      toggleAllQuantityControls(true);
      document.getElementById('cart-subtotal')?.classList.add('is-updating');
      
      const lineItem = document.querySelector(`li[data-line-item-key="${key}"]`);
      if (quantity === 0) {
        showItemRemovalState(lineItem);
      } else if (lineItem) {
        const subtotalEl = lineItem.querySelector('.item-line-total');
        if (subtotalEl) { subtotalEl.innerHTML = `<div class="w-full flex justify-end pr-2">${spinnerSVG}</div>`; }
      }

      fetch('/cart/change.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: key, quantity: quantity }),
      })
      .then(response => response.json())
      .then(cart => { updateUIFromCartData(cart); })
      .catch((error) => {
        console.error('Error updating quantity:', error);
        document.getElementById('cart-subtotal')?.classList.remove('is-updating');
        toggleAllQuantityControls(false);
        refreshCartDrawer();
      });
    };

    // --- Open/Close Drawer Logic ---
    const openDrawer = () => {
      if (!backdrop || !cartDrawer) return;
      document.body.classList.add('body-no-scroll');
      backdrop.classList.remove('invisible', 'opacity-0');
      cartDrawer.classList.remove('translate-x-full');
    };

    const closeDrawer = () => {
      if (!backdrop || !cartDrawer) return;
      document.body.classList.remove('body-no-scroll');
      cartDrawer.classList.add('translate-x-full');
      backdrop.classList.add('opacity-0');
    };

    if (backdrop) {
      backdrop.addEventListener('transitionend', () => {
        if (backdrop.classList.contains('opacity-0')) {
          backdrop.classList.add('invisible');
        }
      });
    }

    // --- Master Event Listeners ---
    openCartButtons.forEach(button => button.addEventListener('click', (event) => {
      event.stopPropagation();
      const isDrawerOpen = cartDrawer && !cartDrawer.classList.contains('translate-x-full');

      if (isDrawerOpen) {
        closeDrawer();
      } else {
        const mobileMenuDrawer = document.getElementById('mobile-menu-drawer');
        if (mobileMenuDrawer && !mobileMenuDrawer.classList.contains('-translate-x-full')) {
          document.getElementById('hamburger-button')?.click();
        }
        refreshCartDrawer();
        openDrawer();
      }
    }));

    if (backdrop) backdrop.addEventListener('click', closeDrawer);
    
    document.addEventListener('cart:added', () => refreshCartDrawer());

    cartDrawer.addEventListener('click', function(event) {
      if (event.target.closest('#close-cart-drawer')) { closeDrawer(); return; }

      const checkoutButton = event.target.closest('#checkout-button');
      if (checkoutButton) {
        event.preventDefault(); // Stop the link from navigating immediately
        const span = checkoutButton.querySelector('span');

        // Apply disabled/loading state
        checkoutButton.classList.add('opacity-70', 'pointer-events-none');
        checkoutButton.classList.remove('hover:shadow-xl', 'hover:-translate-y-1');
        if (span) {
          span.innerHTML = `<div class="flex justify-center items-center">${spinnerSVG}</div>`;
        }

        // Navigate after a short delay to allow the user to see the feedback
        setTimeout(() => {
          window.location.href = checkoutButton.href;
        }, 300);
        return; // Stop further execution
      }

      const button = event.target.closest('.quantity-minus, .quantity-plus');
      if (!button) return;

      const lineItem = button.closest('li');
      if (!lineItem) return;
      
      const input = lineItem.querySelector('input[type="number"]');
      let currentQuantity = parseInt(input.value);

      if (isNaN(currentQuantity)) {
        input.value = input.dataset.lastValidQuantity || 1;
        return;
      }

      const key = lineItem.dataset.lineItemKey;
      let newQuantity = button.classList.contains('quantity-plus') ? currentQuantity + 1 : currentQuantity - 1;

      if (newQuantity < 0) {
        return;
      }
      
      input.value = newQuantity;
      clearTimeout(debounceTimer);

      if (newQuantity === 0) {
        updateQuantity(key, 0);
      } else {
        const minusButton = lineItem.querySelector('.quantity-minus');
        if (minusButton) {
          minusButton.innerHTML = newQuantity === 1 ? trashIconSVG : minusIconSVG;
          
          // START: Add these lines to manage hover classes optimistically
          if (newQuantity === 1) {
            minusButton.classList.remove('hover:text-brand-accent');
            minusButton.classList.add('hover:text-red-500');
          } else {
            minusButton.classList.remove('hover:text-red-500');
            minusButton.classList.add('hover:text-brand-accent');
          }
          // END: Add these lines
        }
        
        const unitPriceEl = lineItem.querySelector('.item-unit-price');
        if (unitPriceEl) { unitPriceEl.classList.toggle('is-visible', newQuantity > 1); }
        
        debounceTimer = setTimeout(() => {
          updateQuantity(key, newQuantity);
        }, 450);
      }
    });

    cartDrawer.addEventListener('input', function(event) {
      if (!event.target.matches('input[type="number"]')) return;
      const input = event.target;
      const lineItem = input.closest('li');
      if (!lineItem) return;

      const quantity = parseInt(input.value);

      if (input.value === '' || isNaN(quantity) || quantity < 0) {
        input.addEventListener('blur', () => {
          input.value = input.dataset.lastValidQuantity || 1;
        }, { once: true });
        return;
      }

      const key = lineItem.dataset.lineItemKey;

      clearTimeout(debounceTimer);
      if (quantity === 0) {
        updateQuantity(key, 0);
        return;
      }
      debounceTimer = setTimeout(() => {
        updateQuantity(key, quantity);
      }, 750);
    });
  });
</script>