{% comment %}
  We are putting the padding and max-width container back in.
  This is the most reliable way to handle spacing.
{% endcomment %}
<div class="max-w-5xl mx-auto px-4 py-8 md:py-16">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-12 items-start">
    <div class="w-full md:sticky top-24">
      <div class="swiper main-gallery aspect-square rounded-lg shadow-lg mb-4 overflow-hidden relative">
        <div class="swiper-wrapper">
          {%- for media in product.media -%}
            <div class="swiper-slide" data-media-id="{{ media.id }}">
              <img
                src="{{ media | image_url: width: 1024 }}"
                loading="lazy"
                class="w-full h-full object-cover cursor-zoom-in zoomable-image"
                sizes="(min-width: 768px) 50vw, 100vw"
                srcset="{{ media | image_url: width: 400 }} 400w,
                        {{ media | image_url: width: 600 }} 600w,
                        {{ media | image_url: width: 800 }} 800w,
                        {{ media | image_url: width: 1024 }} 1024w"
                width="{{ media.preview_image.width }}"
                height="{{ media.preview_image.height }}"
                data-full-src="{{ media | image_url: width: 1600 }}"
                alt="{{ media.alt | escape }}"
              >
            </div>
          {%- endfor -%}
        </div>

        <div class="swiper-nav-zone swiper-nav-zone-prev"></div>
        <div class="swiper-nav-zone swiper-nav-zone-next"></div>

        <div class="swiper-button-prev text-white"></div>
        <div class="swiper-button-next text-white"></div>
      </div>

      <div class="swiper thumbs-gallery h-20">
        <div class="swiper-wrapper">
          {%- for media in product.media -%}
            <div class="swiper-slide cursor-pointer rounded-md overflow-hidden">
              <img
                src="{{ media | image_url: width: 150 }}"
                loading="lazy"
                class="w-full h-full object-cover"
                width="{{ media.preview_image.width }}"
                height="{{ media.preview_image.height }}"
                alt="{{ media.alt | escape }}"
              >
            </div>
          {%- endfor -%}
        </div>
      </div>
    </div>

    <div class="pt-4">
      <h1 class="font-heading text-4xl font-bold mb-4 text-brand-text-sub">{{ product.title }}</h1>

      {%- form 'product', product, id: "product-form", novalidate: 'novalidate' -%}
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">

        <div class="mb-8">
          <div class="flex items-center gap-4 mb-6">
            <p id="product-price" class="text-3xl font-light text-brand-primary">
              {{ product.selected_or_first_available_variant.price | money_without_trailing_zeros }}
            </p>
            <div class='jdgm-widget jdgm-preview-badge' data-id='{{ product.id }}'>
              {{ product.metafields.judgeme.badge }}
            </div>
          </div>

          {%- unless product.has_only_default_variant -%}
            <div class="mb-5">
            {%- for option in product.options_with_values -%}
              <div class="mb-4 last:mb-0">
                <div class="flex items-center gap-2 mt-2">
                  {%- for value in option.values -%}
                    <label>
                      <input type="radio" name="{{ option.name }}" value="{{ value }}" {% if option.selected_value == value %}checked{% endif %} class="sr-only peer">
                      <div class="px-2 py-1 border rounded-lg cursor-pointer text-brand-accent peer-checked:bg-brand-accent peer-checked:text-white peer-checked:border-brand-accent hover:border-brand-accent transition-colors">
                        {{ value }}
                      </div>
                    </label>
                  {%- endfor -%}
                </div>
              </div>
            {%- endfor -%}
            </div>
          {%- endunless -%}

          {% comment %} A separator line for better visual hierarchy {% endcomment %}
          <hr class="my-5 border-gray-300">

          {% comment %} New grid layout for the action buttons and quantity selector {% endcomment %}
          <div class="grid grid-cols-[auto,1fr] md:grid-cols-[auto,1fr,1fr] gap-3 items-center">
            
            <div class="flex items-center border rounded-lg p-1 h-12">
              <button type="button" id="quantity-minus" class="w-8 h-8 flex-shrink-0 flex items-center justify-center text-gray-500 hover:text-gray-800 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg>
              </button>
              <input type="number" id="quantity-input" name="quantity" value="1" min="1" class="w-10 text-center bg-transparent border-none focus:ring-0 font-bold text-brand-text-main p-0">
              <button type="button" id="quantity-plus" class="w-8 h-8 flex-shrink-0 flex items-center justify-center text-gray-500 hover:text-gray-800 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" /></svg>
              </button>
            </div>

            <button
              type="submit"
              name="add"
              id="add-to-cart-button"
              class="w-full bg-brand-primary text-white font-bold px-4 rounded-lg shadow-lg flex items-center justify-center h-12 shadow-neutral-900/20 md:hover:shadow-xl md:hover:shadow-neutral-900/30 transform md:hover:-translate-y-1 transition-all duration-300 disabled:opacity-70 disabled:transform-none disabled:shadow-lg"
              {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}
            >
              <span>Add to Cart</span>
            </button>

            <button
              type="button"
              id="buy-now-button"
              class="w-full bg-brand-text-sub text-white font-bold px-4 rounded-lg shadow-lg flex items-center justify-center h-12 col-span-2 md:col-span-1 shadow-neutral-900/20 md:hover:shadow-xl md:hover:shadow-neutral-900/30 transform md:hover:-translate-y-1 transition-all duration-300 disabled:opacity-70 disabled:transform-none disabled:shadow-lg"
              {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}
            >
              <span>Buy Now</span>
            </button>
          </div>

          <div class="dynamic-checkout-buttons hidden">
            {{ form | payment_button }}
          </div>
        </div>
      {%- endform -%}

      <div class="prose max-w-none text-brand-text-main">
        {{ product.description }}
      </div>
    </div>
  </div>
</div>

{% comment %}
  Hardcoded Judge.me Review Widget
{% endcomment %}
<div class="max-w-5xl mx-auto px-4 py-8 md:py-16">
  <div style='clear:both'></div>
  <div id='judgeme_product_reviews' class='jdgm-widget jdgm-review-widget' data-product-title='{{ product.title | escape }}' data-id='{{ product.id }}' data-auto-install='false'>
    {{ product.metafields.judgeme.widget }}
  </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<script>
  window.variantsData = {{ product.variants | json }};
</script>

<style>
  body.no-scroll { overflow: hidden; }
  .main-gallery { --swiper-navigation-color: #fff; }
  .thumbs-gallery .swiper-slide { opacity: 0.5; transition: opacity 0.3s ease; }
  .thumbs-gallery .swiper-slide-thumb-active {
    opacity: 1;
    border: 2px solid {{ settings.colors.accent_1 | default: '#000' }};
  }
  #zoom-content { -ms-overflow-style: none; scrollbar-width: none; }
  #zoom-content::-webkit-scrollbar { display: none; }
  #zoom-content img { width: 100%; height: auto; max-width: 100%; object-fit: contain; cursor: zoom-out; }
  .swiper-nav-zone { position: absolute; top: 0; width: 20%; height: 100%; z-index: 10; cursor: pointer; }
  .swiper-nav-zone-prev { left: 0; }
  .swiper-nav-zone-next { right: 0; }
  .swiper-button-prev, .swiper-button-next { z-index: 20 !important; }
</style>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    // --- INITIAL SETUP & SHARED VARIABLES ---
    const productForm = document.getElementById('product-form');
    if (!productForm) return;

    const addToCartButton = document.getElementById('add-to-cart-button');
    const buyNowButton = document.getElementById('buy-now-button');
    const spinnerIcon = `<svg class="animate-spin h-5 w-5 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>`;

    // --- SWIPER GALLERY INITIALIZATION ---
    const thumbsSwiper = new Swiper('.thumbs-gallery', {
      loop: false, spaceBetween: 10, slidesPerView: 5, freeMode: true, watchSlidesProgress: true,
    });
    const mainSwiper = new Swiper('.main-gallery', {
      loop: true, spaceBetween: 10, navigation: { nextEl: '.swiper-button-next', prevEl: '.swiper-button-prev' }, thumbs: { swiper: thumbsSwiper },
    });

    // --- LARGE NAVIGATION ZONES LOGIC ---
    document.querySelector('.swiper-nav-zone-prev').addEventListener('click', () => mainSwiper.slidePrev());
    document.querySelector('.swiper-nav-zone-next').addEventListener('click', () => mainSwiper.slideNext());

    // --- CUSTOM ZOOM LOGIC ---
    const zoomOverlay = document.getElementById('zoom-overlay');
    const zoomContent = document.getElementById('zoom-content');
    const zoomClose = document.getElementById('zoom-close');
    const zoomableImages = document.querySelectorAll('.zoomable-image');
    let scrollOffset = 20;

    zoomableImages.forEach(thumb => {
      const highResImage = document.createElement('img');
      highResImage.src = thumb.dataset.fullSrc;
      highResImage.dataset.mediaId = thumb.closest('.swiper-slide').dataset.mediaId;
      zoomContent.appendChild(highResImage);
    });

    const allZoomedImages = zoomContent.querySelectorAll('img');
    if (allZoomedImages.length > 1) {
      const gap = parseInt(window.getComputedStyle(allZoomedImages[1]).marginTop, 10);
      scrollOffset = gap * 2;
    }

    zoomableImages.forEach((image, index) => {
      image.addEventListener('click', (e) => {
        e.stopPropagation();
        const clickedMediaId = image.closest('.swiper-slide').dataset.mediaId;
        const targetImageInZoom = zoomContent.querySelector(`img[data-media-id="${clickedMediaId}"]`);
        zoomOverlay.classList.remove('hidden');
        setTimeout(() => zoomOverlay.classList.remove('opacity-0'), 10);
        document.body.classList.add('no-scroll');
        requestAnimationFrame(() => {
          if (!targetImageInZoom) return;
          if (index === 0) {
            zoomContent.scrollTo({ top: 0, behavior: 'smooth' });
          } else {
            zoomContent.scrollTop = targetImageInZoom.offsetTop - scrollOffset;
          }
        });
      });
    });

    const closeZoom = () => {
      zoomOverlay.classList.add('opacity-0');
      document.body.classList.remove('no-scroll');
      setTimeout(() => zoomOverlay.classList.add('hidden'), 300);
    };

    zoomClose.addEventListener('click', closeZoom);
    zoomOverlay.addEventListener('click', (e) => { if (e.target === zoomOverlay) closeZoom(); });
    zoomContent.addEventListener('click', closeZoom);

    // --- VARIANT SELECTION & SYNCING LOGIC ---
    const productPriceElement = document.getElementById('product-price');
    const hiddenVariantInput = productForm.querySelector('[name="id"]');
    const variantRadios = productForm.querySelectorAll('input[type="radio"]');

    variantRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        setTimeout(() => {
          const selectedOptions = Array.from(productForm.querySelectorAll('input[type="radio"]:checked')).map(r => r.value);
          const matchedVariant = window.variantsData.find(v => {
            return selectedOptions.every((optionValue, index) => v.options[index] === optionValue);
          });

          if (!matchedVariant) return;

          // Update price, hidden ID, and button state
          hiddenVariantInput.value = matchedVariant.id;
          productPriceElement.textContent = (matchedVariant.price / 100).toLocaleString('en-US', { style: 'currency', currency: 'USD' }).replace('.00', '');
          const isAvailable = matchedVariant.available;
          addToCartButton.disabled = !isAvailable;
          buyNowButton.disabled = !isAvailable;
          addToCartButton.querySelector('span').textContent = isAvailable ? 'Add to Cart' : 'Sold Out';

          // Sync with gallery
          if (matchedVariant.featured_media) {
            const targetMediaId = matchedVariant.featured_media.id;
            const targetSlide = document.querySelector(`.swiper-slide[data-media-id="${targetMediaId}"]`);
            if (targetSlide) {
              const slideIndex = Array.from(targetSlide.parentNode.children).indexOf(targetSlide);
              mainSwiper.slideToLoop(slideIndex);
            }
          }
        }, 50);
      });
    });

    // --- QUANTITY SELECTOR LOGIC ---
    const quantityInput = document.getElementById('quantity-input');
    const plusButton = document.getElementById('quantity-plus');
    const minusButton = document.getElementById('quantity-minus');

    if (quantityInput && plusButton && minusButton) {
      plusButton.addEventListener('click', () => quantityInput.stepUp());
      minusButton.addEventListener('click', () => quantityInput.stepDown());
    }

    // --- Add to Cart Logic ---
    productForm.addEventListener('submit', function (event) {
      event.preventDefault();

      addToCartButton.disabled = true;
      buyNowButton.disabled = true;
      addToCartButton.querySelector('span').innerHTML = `<div class="flex justify-center items-center">${spinnerIcon}</div>`;

      const formData = new FormData(productForm);

      fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
      })
        .then((response) => {
          if (!response.ok) throw new Error(response.status);
          return fetch('/cart.js');
        })
        .then((response) => response.json())
        .then((cart) => {
          const cartCountSpan = document.getElementById('cart-item-count');
          if (cartCountSpan) {
            cartCountSpan.textContent = cart.item_count;
            if (cart.item_count > 0) {
              cartCountSpan.classList.remove('hidden');
            }
          }
          
          // Remove the opacity class for a solid success state
          addToCartButton.classList.remove('disabled:opacity-70');
          addToCartButton.querySelector('span').textContent = '✓ Added!';
          
          document.querySelectorAll('#open-cart-button').forEach((btn) => {
            btn.classList.add('animate-shake');
            setTimeout(() => {
              btn.classList.remove('animate-shake');
            }, 600);
          });

          document.dispatchEvent(new CustomEvent('cart:added'));
          
          setTimeout(() => {
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            // Add the opacity class back when resetting
            addToCartButton.classList.add('disabled:opacity-70');
            addToCartButton.querySelector('span').textContent = 'Add to Cart';
          }, 2000); // Increased to 2s for better visibility
        })
        .catch((error) => {
          console.error(error);
          addToCartButton.querySelector('span').textContent = 'Error!';
          setTimeout(() => {
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            addToCartButton.querySelector('span').textContent = 'Add to Cart';
          }, 2000);
        });
    });

    // --- Buy Now Logic ---
    buyNowButton.addEventListener('click', function () {
      buyNowButton.disabled = true;
      addToCartButton.disabled = true;
      buyNowButton.querySelector('span').innerHTML = `<div class="flex justify-center items-center">${spinnerIcon}</div>`;

      // Find the real, hidden Shopify "Buy it now" button
      const realShopifyButton = productForm.querySelector('.shopify-payment-button__button');

      if (realShopifyButton) {
        // Programmatically click the real button to trigger the special checkout
        realShopifyButton.click();
      } else {
        // Fallback or error handling if the button isn't found
        console.error('Dynamic checkout button not found.');
        buyNowButton.querySelector('span').textContent = 'Error!';
        setTimeout(() => {
            buyNowButton.disabled = false;
            addToCartButton.disabled = false;
            buyNowButton.querySelector('span').textContent = 'Buy Now';
        }, 2000);
      }
    });
    
    // --- BFCACHE RESET LOGIC ---
    window.addEventListener('pageshow', function (event) {
      if (event.persisted) {
        // This page was loaded from the bfcache
        const buyNowButton = document.getElementById('buy-now-button');
        const addToCartButton = document.getElementById('add-to-cart-button');

        if (buyNowButton) {
          buyNowButton.disabled = false;
          buyNowButton.querySelector('span').textContent = 'Buy Now';
        }
        if (addToCartButton) {
          addToCartButton.disabled = false;
          // You might want to reset this one too, just in case
          addToCartButton.querySelector('span').textContent = 'Add to Cart';
        }
      }
    });
  });
</script>


{% schema %}
  {
    "name": "t:general.product",
    "settings": [],
    "disabled_on": {
      "groups": ["header", "footer"]
    }
  }
{% endschema %}