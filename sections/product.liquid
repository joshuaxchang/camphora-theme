{% comment %}
  We are putting the padding and max-width container back in.
  This is the most reliable way to handle spacing.
{% endcomment %}
<div class="max-w-5xl mx-auto px-4 py-16">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-12 items-start">
    <div class="w-full md:sticky top-24">
      {% comment %} Main gallery with navigation buttons {% endcomment %}
      <div class="swiper main-gallery aspect-square rounded-lg shadow-lg mb-4 overflow-hidden">
        <div class="swiper-wrapper">
          {%- for media in product.media -%}
            <div class="swiper-slide">
              {{ media | image_url: width: 1024 | image_tag:
                loading: 'lazy',
                class: 'w-full h-full object-cover',
                sizes: '(min-width: 768px) 50vw, 100vw',
                widths: '400, 600, 800, 1024'
              }}
            </div>
          {%- endfor -%}
        </div>
        <div class="swiper-button-prev text-white"></div>
        <div class="swiper-button-next text-white"></div>
      </div>

      {% comment %} Thumbnails gallery {% endcomment %}
      <div class="swiper thumbs-gallery h-24">
        <div class="swiper-wrapper">
          {%- for media in product.media -%}
            <div class="swiper-slide cursor-pointer rounded-md overflow-hidden">
              {{ media | image_url: width: 150 | image_tag:
                loading: 'lazy',
                class: 'w-full h-full object-cover',
                sizes: '100px'
              }}
            </div>
          {%- endfor -%}
        </div>
      </div>
    </div>

    <div class="pt-4">
      <h1 class="font-heading text-4xl font-bold mb-4 text-brand-text">{{ product.title }}</h1>

      {%- form 'product', product, id: "product-form", novalidate: 'novalidate' -%}
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">

        <div class="mb-8">
          <div class="flex items-center gap-4 mb-6">
            <p id="product-price" class="text-3xl font-light text-brand-primary">
              {{ product.selected_or_first_available_variant.price | money_without_trailing_zeros }}
            </p>
            <div class="text-gray-400">
                ★★★★★ (0 reviews)
            </div>
          </div>

          {%- unless product.has_only_default_variant -%}
            <div class="mb-5">
            {%- for option in product.options_with_values -%}
              <div class="mb-4 last:mb-0">
                <div class="flex items-center gap-2 mt-2">
                  {%- for value in option.values -%}
                    <label>
                      <input type="radio" name="{{ option.name }}" value="{{ value }}" {% if option.selected_value == value %}checked{% endif %} class="sr-only peer">
                      <div class="px-2 py-1 border rounded-lg cursor-pointer text-brand-accent peer-checked:bg-brand-accent peer-checked:text-white peer-checked:border-brand-accent hover:border-brand-accent transition-colors">
                        {{ value }}
                      </div>
                    </label>
                  {%- endfor -%}
                </div>
              </div>
            {%- endfor -%}
            </div>
          {%- endunless -%}

          {% comment %} A separator line for better visual hierarchy {% endcomment %}
          <hr class="my-5 border-gray-300">

          {% comment %} New flex layout for the action buttons and quantity selector {% endcomment %}
          <div class="flex items-center gap-3">
            {% comment %} Custom Quantity Selector {% endcomment %}
            <div class="flex-shrink-0 flex items-center border rounded-lg p-1">
              <button type="button" id="quantity-minus" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-800 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" /></svg>
              </button>
              <input type="number" id="quantity-input" name="quantity" value="1" min="1" class="w-10 text-center bg-transparent border-none focus:ring-0 font-bold text-gray-800">
              <button type="button" id="quantity-plus" class="w-8 h-8 flex items-center justify-center text-gray-500 hover:text-gray-800 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" /></svg>
              </button>
            </div>

            {% comment %} New wrapper for buttons to enforce equal width {% endcomment %}
            <div class="flex-grow grid grid-cols-2 gap-3">
              <button
                type="submit"
                name="add"
                id="add-to-cart-button"
                class="w-full bg-brand-primary text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-neutral-900/20 hover:shadow-xl hover:shadow-neutral-900/30 transform hover:-translate-y-1 transition-all duration-300 disabled:opacity-70 disabled:transform-none disabled:shadow-lg"
                {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}
              >
                <span>Add to Cart</span>
              </button>
              <button
                type="button"
                id="buy-now-button"
                class="w-full bg-brand-text text-white font-bold py-3 px-4 rounded-lg shadow-lg shadow-neutral-900/20 hover:shadow-xl hover:shadow-neutral-900/30 transform hover:-translate-y-1 transition-all duration-300 disabled:opacity-70 disabled:transform-none disabled:shadow-lg"
                {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}
              >
                <span>Buy Now</span>
              </button>
            </div>
          </div>

          <div class="dynamic-checkout-buttons hidden">
            {{ form | payment_button }}
          </div>
        </div>
      {%- endform -%}

      <div class="prose max-w-none text-gray-700">
        {{ product.description }}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const productForm = document.getElementById('product-form');
    if (!productForm) return;

    const addToCartButton = document.getElementById('add-to-cart-button');
    const buyNowButton = document.getElementById('buy-now-button');
    const spinnerIcon = `<svg class="animate-spin h-5 w-5 text-current" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>`;
    // --- Variant Selection Logic ---
    const variantRadios = document.querySelectorAll('input[type="radio"]');
    const productPriceElement = document.getElementById('product-price');
    const hiddenVariantInput = productForm.querySelector('[name="id"]');
    const variantsData = {{ product.variants | json }};

    variantRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        const selectedOptions = Array.from(document.querySelectorAll('input[type="radio"]:checked')).map(r => r.value);
        
        const matchedVariant = variantsData.find(variant => {
          // Check if every selected option matches the variant's options
          return selectedOptions.every((optionValue, index) => {
            return variant.options[index] === optionValue;
          });
        });

        if (matchedVariant) {
          // Update the hidden input with the new variant ID
          hiddenVariantInput.value = matchedVariant.id;

          // Update the price on the page
          const price = (matchedVariant.price / 100).toLocaleString('en-US', { style: 'currency', currency: 'USD' }).replace('.00', '');
          productPriceElement.textContent = price;

          // Update button availability
          if (matchedVariant.available) {
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            addToCartButton.querySelector('span').textContent = 'Add to Cart';
          } else {
            addToCartButton.disabled = true;
            buyNowButton.disabled = true;
            addToCartButton.querySelector('span').textContent = 'Sold Out';
          }
        }
      });
    });

    // --- Custom Quantity Selector Logic ---
    const quantityInput = document.getElementById('quantity-input');
    const plusButton = document.getElementById('quantity-plus');
    const minusButton = document.getElementById('quantity-minus');

    if (quantityInput && plusButton && minusButton) {
      plusButton.addEventListener('click', () => {
        quantityInput.stepUp();
      });

      minusButton.addEventListener('click', () => {
        // stepDown() will not go below `min` attribute (which is 1)
        quantityInput.stepDown();
      });
    }

    // --- Add to Cart Logic ---
    productForm.addEventListener('submit', function (event) {
      event.preventDefault();

      addToCartButton.disabled = true;
      buyNowButton.disabled = true;
      addToCartButton.querySelector('span').innerHTML = `<div class="flex justify-center items-center">${spinnerIcon}</div>`;

      const formData = new FormData(productForm);

      fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
      })
        .then((response) => {
          if (!response.ok) throw new Error(response.status);
          // After adding, fetch the updated cart data
          return fetch('/cart.js');
        })
        .then((response) => response.json())
        .then((cart) => {
          // Update the cart count in the header
          const cartCountSpan = document.getElementById('cart-item-count');
          if (cartCountSpan) {
            cartCountSpan.textContent = cart.item_count;
            if (cart.item_count > 0) {
              cartCountSpan.classList.remove('hidden');
            }
          }
          
          addToCartButton.querySelector('span').textContent = '✓ Added!';
          
          // Shake the cart icon
          document.querySelectorAll('#open-cart-button').forEach((btn) => {
            btn.classList.add('animate-shake');
            setTimeout(() => {
              btn.classList.remove('animate-shake');
            }, 600);
          });

          // TODO: Update cart drawer here
          setTimeout(() => {
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            addToCartButton.querySelector('span').textContent = 'Add to Cart';
          }, 1000);
        })
        .catch((error) => {
          console.error(error);
          addToCartButton.querySelector('span').textContent = 'Error!';
          setTimeout(() => {
            addToCartButton.disabled = false;
            buyNowButton.disabled = false;
            addToCartButton.querySelector('span').textContent = 'Add to Cart';
          }, 2000);
        });
    });

    // --- Buy Now Logic ---
    buyNowButton.addEventListener('click', function () {
      buyNowButton.disabled = true;
      addToCartButton.disabled = true;
      buyNowButton.querySelector('span').innerHTML = `<div class="flex justify-center items-center">${spinnerIcon}</div>`;

      // Find the real, hidden Shopify "Buy it now" button
      const realShopifyButton = productForm.querySelector('.shopify-payment-button__button');

      if (realShopifyButton) {
        // Programmatically click the real button to trigger the special checkout
        realShopifyButton.click();
      } else {
        // Fallback or error handling if the button isn't found
        console.error('Dynamic checkout button not found.');
        buyNowButton.querySelector('span').textContent = 'Error!';
        setTimeout(() => {
            buyNowButton.disabled = false;
            addToCartButton.disabled = false;
            buyNowButton.querySelector('span').textContent = 'Buy Now';
        }, 2000);
      }
    });
  });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>

<style>
  /* Custom styles for the gallery */
  .main-gallery {
    --swiper-navigation-color: #fff;
  }
  .thumbs-gallery .swiper-slide {
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }
  .thumbs-gallery .swiper-slide-thumb-active {
    opacity: 1;
    border: 2px solid #000; /* Use your brand color variable here if you have one */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Initialize the thumbnail swiper first
    const thumbsSwiper = new Swiper('.thumbs-gallery', {
      loop: false, // It's better not to loop thumbnails for clarity
      spaceBetween: 10,
      slidesPerView: 4,
      freeMode: true,
      watchSlidesProgress: true,
    });

    // Initialize the main swiper
    const mainSwiper = new Swiper('.main-gallery', {
      loop: true,
      spaceBetween: 10,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      // Link it to the thumbnail swiper
      thumbs: {
        swiper: thumbsSwiper,
      },
    });
  });
</script>

{% schema %}
  {
    "name": "t:general.product",
    "settings": [],
    "disabled_on": {
      "groups": ["header", "footer"]
    }
  }
{% endschema %}