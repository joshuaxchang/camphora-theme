<header class="relative md:h-20 max-h-20 md:max-h-20 overflow-hidden transition-[max-height] duration-300 ease-in-out">
  <div class="max-w-5xl mx-auto px-4">
    <div class="relative flex items-center justify-between h-20">

      <div class="flex items-center">
        <div class="md:hidden">
          <button id="hamburger-button" class="relative w-10 h-10 -ml-2" aria-label="Open menu" aria-expanded="false">
            <svg id="hamburger-icon-open" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h12"></path>
            </svg>
            <span id="hamburger-icon-close" class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 hidden text-4xl font-semibold leading-none text-gray-700">&times;</span>
          </button>
        </div>

        <nav class="hidden md:flex md:grow">
          <ul class="flex grow flex-wrap items-center">
            {%- for link in main_menu.links -%}
              <li><a href="{{ link.url }}" class="font-semibold text-gray-700 hover:text-brand-text px-4 py-2">{{ link.title }}</a></li>
            {%- endfor -%}
          </ul>
        </nav>
      </div>

      <div class="absolute left-1/2 -translate-x-1/2 md:static md:translate-x-0 md:flex-1 md:order-first">
        <a href="/" class="flex items-center gap-2">
          <img src="{{ 'camphora-logo.svg' | asset_url }}" alt="Camphora Studio Logo" class="w-8 h-8">
          <span class="text-xl font-bold text-brand-text">Camphora Studio</span>
        </a>
      </div>

      <div class="flex items-center ml-4">
        <button type="button" id="open-cart-button" class="relative block w-6 h-6">
          {% render 'icon-cart' %}
          <span id="cart-item-count" class="absolute -top-2 -right-3 bg-brand-primary text-white text-xs rounded-full h-5 w-5 flex items-center justify-center {% if cart.item_count == 0 %}hidden{% endif %}">
            {{ cart.item_count }}
          </span>
        </button>
      </div>
    </div>
  </div>

  <div id="mobile-menu-content" class="h-[calc(100vh-5rem)] flex flex-col justify-between md:hidden">
    <div class="p-4">
      <ul class="space-y-4 text-center">
        {%- for link in main_menu.links -%}
          <li><a href="{{ link.url }}" class="block py-2 text-xl font-semibold text-gray-700 hover:text-brand-text">{{ link.title }}</a></li>
        {%- endfor -%}
      </ul>
    </div>
    <div class="p-4 border-t border-white/10">
      <ul class="space-y-2 text-center">
        {%- for link in mobile_bottom_menu.links -%}
          <li><a href="{{ link.url }}" class="block py-1 text-sm text-gray-600 hover:text-brand-text">{{ link.title }}</a></li>
        {%- endfor -%}
      </ul>
    </div>
  </div>
</header>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // --- Element Definitions ---
  const hamburgerButton = document.getElementById('hamburger-button');
  const headerElement = hamburgerButton.closest('header');
  const headerSection = document.getElementById('shopify-section-header');
  const mainElement = document.querySelector('main');
  const footerSection = document.getElementById('shopify-section-footer');
  const openIcon = document.getElementById('hamburger-icon-open');
  const closeIcon = document.getElementById('hamburger-icon-close');

  // A flag to ensure the "short page" height adjustment only runs once.
  let hackApplied = false;

  // --- Master Menu Toggle Function (with Callback) ---
  const toggleMenu = (isOpen, callback) => {
    const onTransitionEnd = () => {
      if (typeof callback === 'function') {
        callback();
      }
      headerElement.removeEventListener('transitionend', onTransitionEnd);
    };

    if (isOpen) {
      const isScrollable = document.documentElement.scrollHeight > window.innerHeight;
      const performOpening = () => {
        document.body.classList.add('body-no-scroll');
        headerElement.classList.add('max-h-screen');
        headerElement.classList.remove('max-h-20');
        // Correctly toggle icons
        openIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
        hamburgerButton.setAttribute('aria-expanded', 'true');
      };

      // This logic handles visual glitches on pages with very little content.
      if (!isScrollable && mainElement && footerSection) {
        if (!hackApplied) {
          const headerHeight = headerSection ? headerSection.offsetHeight : 0;
          const mainHeight = mainElement.offsetHeight;
          const footerHeight = footerSection.offsetHeight;
          const totalContentHeight = headerHeight + mainHeight + footerHeight;
          const viewportHeight = window.innerHeight;
          if (totalContentHeight <= viewportHeight) {
            const neededHeight = (viewportHeight - totalContentHeight) + 1;
            const newFooterMinHeight = footerHeight + neededHeight;
            footerSection.style.minHeight = `${newFooterMinHeight}px`;
            hackApplied = true;
          }
        }
        requestAnimationFrame(() => {
          window.scrollTo(0, 1);
          performOpening();
        });
      } else {
        if (window.scrollY === 0) {
          window.scrollTo(0, 1);
        }
        performOpening();
      }
    } else {
      // When closing, listen for the animation to end before running the callback.
      headerElement.addEventListener('transitionend', onTransitionEnd, { once: true });
      document.body.classList.remove('body-no-scroll');
      headerElement.classList.add('max-h-20');
      headerElement.classList.remove('max-h-screen');
      openIcon.classList.remove('hidden');
      closeIcon.classList.add('hidden');
      hamburgerButton.setAttribute('aria-expanded', 'false');
    }
  };

  // --- Hamburger Button Click ---
  hamburgerButton.addEventListener('click', () => {
    const isExpanded = hamburgerButton.getAttribute('aria-expanded') === 'true';
    toggleMenu(!isExpanded);
  });

  // --- Sticky Header Styling ---
  if (headerSection) {
    headerSection.classList.add('bg-brand-bg/80', 'backdrop-blur-md', 'sticky', 'top-0', 'z-30');
  }

  // --- Unified Navigation Handler for All Header Links ---
  const allHeaderLinks = document.querySelectorAll('header a');
  allHeaderLinks.forEach(link => {
    link.addEventListener('click', (event) => {
      const isMobileMenuOpen = hamburgerButton.getAttribute('aria-expanded') === 'true';
      const destination = link.href;
      const isProductsLinkOnHomepage = link.getAttribute('href').endsWith('/#products') && window.location.pathname === '/';
      if (isProductsLinkOnHomepage) {
        event.preventDefault();
        const performScroll = () => {
          const target = document.querySelector('#products');
          if (target) target.scrollIntoView({ behavior: 'smooth' });
        };
        if (isMobileMenuOpen) {
          toggleMenu(false, performScroll);
        } else {
          performScroll(); // Desktop smooth scroll
        }
      } else if (isMobileMenuOpen) {
        // This now correctly handles the site logo and all other mobile menu links.
        event.preventDefault();
        const navigate = () => { window.location.href = destination; };
        toggleMenu(false, navigate);
      }
      // If none of the above, it's a normal desktop link click, so do nothing and let it navigate.
    });
  });
});
</script>

{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "link_list",
      "id": "main_menu",
      "label": "Main Menu",
      "default": "main-menu",
      "info": "Controls the main navigation links in the header for both desktop and mobile."
    },
    {
      "type": "link_list",
      "id": "mobile_bottom_menu",
      "label": "Mobile Menu Bottom Links",
      "info": "Used for secondary links at the bottom of the mobile menu drawer (e.g., policies)."
    }
  ]
}
{% endschema %}
